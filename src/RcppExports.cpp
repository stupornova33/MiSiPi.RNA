// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mergePileups
DataFrame mergePileups(std::vector<int> start, std::vector<int> end, std::vector<int> pileups_pos, std::vector<int> pileups_count);
RcppExport SEXP _MiSiPi_RNA_mergePileups(SEXP startSEXP, SEXP endSEXP, SEXP pileups_posSEXP, SEXP pileups_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type pileups_pos(pileups_posSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type pileups_count(pileups_countSEXP);
    rcpp_result_gen = Rcpp::wrap(mergePileups(start, end, pileups_pos, pileups_count));
    return rcpp_result_gen;
END_RCPP
}
// get_nearby
DataFrame get_nearby(IntegerVector f_start, IntegerVector f_end, IntegerVector r_start, IntegerVector r_end, int max_dist, int dfsize);
RcppExport SEXP _MiSiPi_RNA_get_nearby(SEXP f_startSEXP, SEXP f_endSEXP, SEXP r_startSEXP, SEXP r_endSEXP, SEXP max_distSEXP, SEXP dfsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type f_start(f_startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type f_end(f_endSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_start(r_startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_end(r_endSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< int >::type dfsize(dfsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nearby(f_start, f_end, r_start, r_end, max_dist, dfsize));
    return rcpp_result_gen;
END_RCPP
}
// getFastas
DataFrame getFastas(std::string input_str, IntegerVector start, IntegerVector stop, int size);
RcppExport SEXP _MiSiPi_RNA_getFastas(SEXP input_strSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_str(input_strSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getFastas(input_str, start, stop, size));
    return rcpp_result_gen;
END_RCPP
}
// convertU
std::vector<std::string> convertU(std::vector<std::string> input_str, int size);
RcppExport SEXP _MiSiPi_RNA_convertU(SEXP input_strSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type input_str(input_strSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(convertU(input_str, size));
    return rcpp_result_gen;
END_RCPP
}
// getPileups
DataFrame getPileups(std::vector<int> dtpos, std::vector<int> dtcount, std::vector<int> start_r1, std::vector<int> end_r1, std::vector<int> start_r2, std::vector<int> end_r2);
RcppExport SEXP _MiSiPi_RNA_getPileups(SEXP dtposSEXP, SEXP dtcountSEXP, SEXP start_r1SEXP, SEXP end_r1SEXP, SEXP start_r2SEXP, SEXP end_r2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type dtpos(dtposSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dtcount(dtcountSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start_r1(start_r1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end_r1(end_r1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start_r2(start_r2SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end_r2(end_r2SEXP);
    rcpp_result_gen = Rcpp::wrap(getPileups(dtpos, dtcount, start_r1, end_r1, start_r2, end_r2));
    return rcpp_result_gen;
END_RCPP
}
// vectorsToMap
std::map<int, int> vectorsToMap(std::vector<int>& k, std::vector<int>& v);
RcppExport SEXP _MiSiPi_RNA_vectorsToMap(SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorsToMap(k, v));
    return rcpp_result_gen;
END_RCPP
}
// getPileupsMap
DataFrame getPileupsMap(std::vector<int> dtpos, std::vector<int> dtcount, std::vector<int> start_r1, std::vector<int> end_r1, std::vector<int> start_r2, std::vector<int> end_r2);
RcppExport SEXP _MiSiPi_RNA_getPileupsMap(SEXP dtposSEXP, SEXP dtcountSEXP, SEXP start_r1SEXP, SEXP end_r1SEXP, SEXP start_r2SEXP, SEXP end_r2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type dtpos(dtposSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dtcount(dtcountSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start_r1(start_r1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end_r1(end_r1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start_r2(start_r2SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end_r2(end_r2SEXP);
    rcpp_result_gen = Rcpp::wrap(getPileupsMap(dtpos, dtcount, start_r1, end_r1, start_r2, end_r2));
    return rcpp_result_gen;
END_RCPP
}
// group_helix_res
DataFrame group_helix_res(std::vector<int> x, std::vector<int> y);
RcppExport SEXP _MiSiPi_RNA_group_helix_res(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(group_helix_res(x, y));
    return rcpp_result_gen;
END_RCPP
}
// calc_overhangs
DataFrame calc_overhangs(std::vector<int> r1_start, std::vector<int> r1_end, std::vector<int> r2_start, std::vector<int> r2_width);
RcppExport SEXP _MiSiPi_RNA_calc_overhangs(SEXP r1_startSEXP, SEXP r1_endSEXP, SEXP r2_startSEXP, SEXP r2_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type r1_start(r1_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r1_end(r1_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2_start(r2_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2_width(r2_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_overhangs(r1_start, r1_end, r2_start, r2_width));
    return rcpp_result_gen;
END_RCPP
}
// calc_expand_overhangs
DataFrame calc_expand_overhangs(std::vector<int> r1_start, std::vector<int> r1_end, std::vector<int> r2_start, std::vector<int> r2_width);
RcppExport SEXP _MiSiPi_RNA_calc_expand_overhangs(SEXP r1_startSEXP, SEXP r1_endSEXP, SEXP r2_startSEXP, SEXP r2_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type r1_start(r1_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r1_end(r1_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2_start(r2_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2_width(r2_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_expand_overhangs(r1_start, r1_end, r2_start, r2_width));
    return rcpp_result_gen;
END_RCPP
}
// proper_overlap
int proper_overlap(int widthx, int widthy);
RcppExport SEXP _MiSiPi_RNA_proper_overlap(SEXP widthxSEXP, SEXP widthySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type widthx(widthxSEXP);
    Rcpp::traits::input_parameter< int >::type widthy(widthySEXP);
    rcpp_result_gen = Rcpp::wrap(proper_overlap(widthx, widthy));
    return rcpp_result_gen;
END_RCPP
}
// overlap_counts
int overlap_counts(std::vector<int> f_start, int X_SIZE, std::vector<int> r_end, int Y_SIZE, int overlap);
RcppExport SEXP _MiSiPi_RNA_overlap_counts(SEXP f_startSEXP, SEXP X_SIZESEXP, SEXP r_endSEXP, SEXP Y_SIZESEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type f_start(f_startSEXP);
    Rcpp::traits::input_parameter< int >::type X_SIZE(X_SIZESEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r_end(r_endSEXP);
    Rcpp::traits::input_parameter< int >::type Y_SIZE(Y_SIZESEXP);
    Rcpp::traits::input_parameter< int >::type overlap(overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(overlap_counts(f_start, X_SIZE, r_end, Y_SIZE, overlap));
    return rcpp_result_gen;
END_RCPP
}
// get_si_overlaps
NumericMatrix get_si_overlaps(std::vector<int> fdt_start, std::vector<int> fdt_end, std::vector<int> fwidth, std::vector<int> rdt_start, std::vector<int> rdt_end, std::vector<int> rwidth);
RcppExport SEXP _MiSiPi_RNA_get_si_overlaps(SEXP fdt_startSEXP, SEXP fdt_endSEXP, SEXP fwidthSEXP, SEXP rdt_startSEXP, SEXP rdt_endSEXP, SEXP rwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_start(fdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_end(fdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fwidth(fwidthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_start(rdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_end(rdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rwidth(rwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_si_overlaps(fdt_start, fdt_end, fwidth, rdt_start, rdt_end, rwidth));
    return rcpp_result_gen;
END_RCPP
}
// get_phased_dist
DataFrame get_phased_dist(IntegerVector startX, IntegerVector endX, IntegerVector startY, IntegerVector endY, int dfsize);
RcppExport SEXP _MiSiPi_RNA_get_phased_dist(SEXP startXSEXP, SEXP endXSEXP, SEXP startYSEXP, SEXP endYSEXP, SEXP dfsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type startX(startXSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type endX(endXSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type startY(startYSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type endY(endYSEXP);
    Rcpp::traits::input_parameter< int >::type dfsize(dfsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_phased_dist(startX, endX, startY, endY, dfsize));
    return rcpp_result_gen;
END_RCPP
}
// make_count_table
DataFrame make_count_table(std::vector<int> fdt_start, std::vector<int> fdt_end, std::vector<int> fwidth, std::vector<int> rdt_start, std::vector<int> rdt_end, std::vector<int> rwidth);
RcppExport SEXP _MiSiPi_RNA_make_count_table(SEXP fdt_startSEXP, SEXP fdt_endSEXP, SEXP fwidthSEXP, SEXP rdt_startSEXP, SEXP rdt_endSEXP, SEXP rwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_start(fdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_end(fdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fwidth(fwidthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_start(rdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_end(rdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rwidth(rwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(make_count_table(fdt_start, fdt_end, fwidth, rdt_start, rdt_end, rwidth));
    return rcpp_result_gen;
END_RCPP
}
// map_and_count
int map_and_count(std::vector<int> fstart, int fstart_size, std::vector<int> rend, int proper_overlap);
RcppExport SEXP _MiSiPi_RNA_map_and_count(SEXP fstartSEXP, SEXP fstart_sizeSEXP, SEXP rendSEXP, SEXP proper_overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fstart(fstartSEXP);
    Rcpp::traits::input_parameter< int >::type fstart_size(fstart_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rend(rendSEXP);
    Rcpp::traits::input_parameter< int >::type proper_overlap(proper_overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(map_and_count(fstart, fstart_size, rend, proper_overlap));
    return rcpp_result_gen;
END_RCPP
}
// get_pi_overlaps
NumericMatrix get_pi_overlaps(std::vector<int> fdt_start, std::vector<int> fdt_end, std::vector<int> fwidth, std::vector<int> rdt_end, std::vector<int> rdt_start, std::vector<int> rwidth);
RcppExport SEXP _MiSiPi_RNA_get_pi_overlaps(SEXP fdt_startSEXP, SEXP fdt_endSEXP, SEXP fwidthSEXP, SEXP rdt_endSEXP, SEXP rdt_startSEXP, SEXP rwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_start(fdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_end(fdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fwidth(fwidthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_end(rdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_start(rdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rwidth(rwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pi_overlaps(fdt_start, fdt_end, fwidth, rdt_end, rdt_start, rwidth));
    return rcpp_result_gen;
END_RCPP
}
// get_overlap_counts
NumericMatrix get_overlap_counts(std::vector<int> fdt_start, std::vector<int> fdt_end, std::vector<int> fwidth, std::vector<int> rdt_end, std::vector<int> rdt_start, std::vector<int> rwidth, bool check_pi);
RcppExport SEXP _MiSiPi_RNA_get_overlap_counts(SEXP fdt_startSEXP, SEXP fdt_endSEXP, SEXP fwidthSEXP, SEXP rdt_endSEXP, SEXP rdt_startSEXP, SEXP rwidthSEXP, SEXP check_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_start(fdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_end(fdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fwidth(fwidthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_end(rdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_start(rdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rwidth(rwidthSEXP);
    Rcpp::traits::input_parameter< bool >::type check_pi(check_piSEXP);
    rcpp_result_gen = Rcpp::wrap(get_overlap_counts(fdt_start, fdt_end, fwidth, rdt_end, rdt_start, rwidth, check_pi));
    return rcpp_result_gen;
END_RCPP
}
// getLoopPileupsCPP
DataFrame getLoopPileupsCPP(std::vector<int> r1Start, std::vector<int> r1Stop, std::vector<int> lStart, std::vector<int> lStop, std::vector<int> r2Start, std::vector<int> r2Stop, std::vector<int> dt_col_1, std::vector<int> dt_col_2, int total_count);
RcppExport SEXP _MiSiPi_RNA_getLoopPileupsCPP(SEXP r1StartSEXP, SEXP r1StopSEXP, SEXP lStartSEXP, SEXP lStopSEXP, SEXP r2StartSEXP, SEXP r2StopSEXP, SEXP dt_col_1SEXP, SEXP dt_col_2SEXP, SEXP total_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type r1Start(r1StartSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r1Stop(r1StopSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lStart(lStartSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lStop(lStopSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2Start(r2StartSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type r2Stop(r2StopSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dt_col_1(dt_col_1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dt_col_2(dt_col_2SEXP);
    Rcpp::traits::input_parameter< int >::type total_count(total_countSEXP);
    rcpp_result_gen = Rcpp::wrap(getLoopPileupsCPP(r1Start, r1Stop, lStart, lStop, r2Start, r2Stop, dt_col_1, dt_col_2, total_count));
    return rcpp_result_gen;
END_RCPP
}
// rep_nonseq_reads
DataFrame rep_nonseq_reads(std::vector<int> rep_count, std::vector<std::string> rname, std::vector<int> start, std::vector<int> end, std::vector<std::string> first);
RcppExport SEXP _MiSiPi_RNA_rep_nonseq_reads(SEXP rep_countSEXP, SEXP rnameSEXP, SEXP startSEXP, SEXP endSEXP, SEXP firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type rep_count(rep_countSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rname(rnameSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type first(firstSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_nonseq_reads(rep_count, rname, start, end, first));
    return rcpp_result_gen;
END_RCPP
}
// rep_seq_reads
DataFrame rep_seq_reads(std::vector<int> rep_count, std::vector<std::string> rname, std::vector<int> start, std::vector<int> end, std::vector<std::string> first, std::vector<std::string> seq);
RcppExport SEXP _MiSiPi_RNA_rep_seq_reads(SEXP rep_countSEXP, SEXP rnameSEXP, SEXP startSEXP, SEXP endSEXP, SEXP firstSEXP, SEXP seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type rep_count(rep_countSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rname(rnameSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type seq(seqSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_seq_reads(rep_count, rname, start, end, first, seq));
    return rcpp_result_gen;
END_RCPP
}
// new_get_si_overlaps
NumericMatrix new_get_si_overlaps(std::vector<int> fdt_start, std::vector<int> fdt_end, std::vector<int> fwidth, std::vector<int> rdt_start, std::vector<int> rdt_end, std::vector<int> rwidth);
RcppExport SEXP _MiSiPi_RNA_new_get_si_overlaps(SEXP fdt_startSEXP, SEXP fdt_endSEXP, SEXP fwidthSEXP, SEXP rdt_startSEXP, SEXP rdt_endSEXP, SEXP rwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_start(fdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fdt_end(fdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type fwidth(fwidthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_start(rdt_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rdt_end(rdt_endSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rwidth(rwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(new_get_si_overlaps(fdt_start, fdt_end, fwidth, rdt_start, rdt_end, rwidth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MiSiPi_RNA_mergePileups", (DL_FUNC) &_MiSiPi_RNA_mergePileups, 4},
    {"_MiSiPi_RNA_get_nearby", (DL_FUNC) &_MiSiPi_RNA_get_nearby, 6},
    {"_MiSiPi_RNA_getFastas", (DL_FUNC) &_MiSiPi_RNA_getFastas, 4},
    {"_MiSiPi_RNA_convertU", (DL_FUNC) &_MiSiPi_RNA_convertU, 2},
    {"_MiSiPi_RNA_getPileups", (DL_FUNC) &_MiSiPi_RNA_getPileups, 6},
    {"_MiSiPi_RNA_vectorsToMap", (DL_FUNC) &_MiSiPi_RNA_vectorsToMap, 2},
    {"_MiSiPi_RNA_getPileupsMap", (DL_FUNC) &_MiSiPi_RNA_getPileupsMap, 6},
    {"_MiSiPi_RNA_group_helix_res", (DL_FUNC) &_MiSiPi_RNA_group_helix_res, 2},
    {"_MiSiPi_RNA_calc_overhangs", (DL_FUNC) &_MiSiPi_RNA_calc_overhangs, 4},
    {"_MiSiPi_RNA_calc_expand_overhangs", (DL_FUNC) &_MiSiPi_RNA_calc_expand_overhangs, 4},
    {"_MiSiPi_RNA_proper_overlap", (DL_FUNC) &_MiSiPi_RNA_proper_overlap, 2},
    {"_MiSiPi_RNA_overlap_counts", (DL_FUNC) &_MiSiPi_RNA_overlap_counts, 5},
    {"_MiSiPi_RNA_get_si_overlaps", (DL_FUNC) &_MiSiPi_RNA_get_si_overlaps, 6},
    {"_MiSiPi_RNA_get_phased_dist", (DL_FUNC) &_MiSiPi_RNA_get_phased_dist, 5},
    {"_MiSiPi_RNA_make_count_table", (DL_FUNC) &_MiSiPi_RNA_make_count_table, 6},
    {"_MiSiPi_RNA_map_and_count", (DL_FUNC) &_MiSiPi_RNA_map_and_count, 4},
    {"_MiSiPi_RNA_get_pi_overlaps", (DL_FUNC) &_MiSiPi_RNA_get_pi_overlaps, 6},
    {"_MiSiPi_RNA_get_overlap_counts", (DL_FUNC) &_MiSiPi_RNA_get_overlap_counts, 7},
    {"_MiSiPi_RNA_getLoopPileupsCPP", (DL_FUNC) &_MiSiPi_RNA_getLoopPileupsCPP, 9},
    {"_MiSiPi_RNA_rep_nonseq_reads", (DL_FUNC) &_MiSiPi_RNA_rep_nonseq_reads, 5},
    {"_MiSiPi_RNA_rep_seq_reads", (DL_FUNC) &_MiSiPi_RNA_rep_seq_reads, 6},
    {"_MiSiPi_RNA_new_get_si_overlaps", (DL_FUNC) &_MiSiPi_RNA_new_get_si_overlaps, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_MiSiPi_RNA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
